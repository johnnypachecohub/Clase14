copiar package.json y tsconfig.json , y luego:
npm install

01-middlwares asi debe ser el orden de la estructura, el middlware debe estar antes de la progracion del Node

en los 2 primeros ejemplos el middlware analiza la ruta "/" (desde la raiz)

instalar el motor de pug
npm install pug --save

si el a tiene class
a.principal(href='')

si el a tiene un id
a#principal

en el layou, el block hace un REEMPLACE de etiquetas

en el 02 revisar el package json, se agrego un ts-node
solo basta ejecuta npm start y se levanta la aplicacion

nodemon.json se setea la configuracion, watch cuando cambie se reinicia el servidor de node
sudo npm i nodemon -g

en el 02, solo basta escribir: nodemon   y se levantara la aplicacion
en el 02, npm run comandoCualquiera  y se levantara ese servidor (estan en el package json)

git clone (ruta) 


sudo npm i body-parser --save

ejecutamos el proyecto con: npm run comandoCualquiera
como en servidor.ts no tenemos nada que haga post, usamos la extension de google postman para simularlo

para que soporte put y delete
npm i method-override --save

morgan: cada ez q alguien hace una peticion muestra una linea con que metodos ha sido echa la peticion, con que ruta y cual es el estado de la respuesta, crea log indicando sobre todas las peticiones estan sucediendo
sudo npm i morgan --save

-------------------------
base de datos gratuita: mlab o cloudmongo  (500 MB libres)

drivers para mongo: mongoose
		 y @types/mongoose

sudo npm i mongoose @types/mongoose --save
luego modificar tsconfig.json  para agregar tipos

no se llaman tablas sino colecciones en mongo

en mixFormulario antes habia esto:
<!--
mixin formulario()
	form(method="post", action="/registro?_method=PUT")
		button(type="submit", value="Enviar") Enviar
-->

